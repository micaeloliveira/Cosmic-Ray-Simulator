//
// F. Barao, May 2012
//
// test program: 
// - activate phys processes
// - propapagate particle 
///////////////////////////////////////////////////////////////////////////////



//ROOT
#include "TROOT.h"
#include "TGeoManager.h"
#include <TGeoMatrix.h>
#include <TGeoVolume.h>
#include <TVector3.h>
#include <TGeoMaterial.h>
#include <TF1.h>
#include <TCanvas.h>

#include "LMCgeomN.h"
#include "LMCpropagator.h"
//#include "LMCpropMuon.h"
#include "LMCmaterials.h"
#include <vector>
#include "TParticle.h"
#include "LMCstep.h"
#include "LMCfunctor.h"
#include <TApplication.h>

#include "LMCconstants.h"
#include "LMCstack.h"

using namespace std;
using namespace LMCconstants;
 //////////////////////////////////////////////////////////////////////////////
int main(int argc, char** argv) {
  /*
  bool a= true, b=false;
  if(a && !b)cout << "PASSOU" << endl;
  getchar();
  */

  cout<<"Ids  "<<id("mu-")<<endl;
  cout<<"Electron Radius   "<<r_e()<<"  and mass "<<e_m()<<endl;
  cout<<"hc   "<<hc()<<endl;
  getchar();
  //   TApplication theApp("App",&argc,argv);
  
<<<<<<< .mine
  double vtx[3] = {0.,0.,-20.};
  double mom[3] = {1,0,-1.};
=======
  double vtx[3] = {0.,0.,-20};
  double mom[3] = {0,0,-1.};
>>>>>>> .r80
  int PID = 13;
   
  //define geometry
  LMCgeomN *g = new LMCgeomN("Telescope");
  //LMCgeomN *g = new LMCgeomN("Tank");
  //LMCmaterials *mat = g->GetLMCmaterials();
  
  //create propagator and 
  LMCpropagator *prop = new LMCpropagator(g->GetGeoManager());
  //LMCpropMuon *prop = new LMCpropMuon (g->GetGeoManager());
  
  //stack
  //LMCstack *stack = LMCstack::GetInstance();
  
  //set particle in propagator
  TParticle *particle = new TParticle(PID,0,0,0,0,0,mom[0],mom[1],mom[2],0.,vtx[0],vtx[1],vtx[2],0.);
  //stack->AddParticle(particle);
  
  //activate phys processes (node, phys proc)
  vector<string> vint;
  vint.assign  (1,"SCI");
  prop->SetPhysProcesses("Scintillator_1",vint);
  prop->SetPhysProcesses("Scintillator_2",vint);
  prop->SetPhysProcesses("Scintillator_3",vint);
  
  vint.push_back("dEdx");
  prop->SetPhysProcesses("Scintillator_1",vint);
  prop->SetPhysProcesses("Scintillator_2",vint);
  prop->SetPhysProcesses("Scintillator_3",vint);
  
  
  vint.assign (1,"CER");
  prop->SetPhysProcesses("LightGuideTrap_1",vint);
  prop->SetPhysProcesses("LightGuideTrap_2",vint);
  prop->SetPhysProcesses("LightGuideTrap_3",vint);
  prop->SetPhysProcesses("LightGuideRod_1",vint);
  prop->SetPhysProcesses("LightGuideRod_2",vint);
  prop->SetPhysProcesses("LightGuideRod_3",vint);
  prop->SetPhysProcesses("PMTWindowTank_1",vint);
  prop->SetPhysProcesses("PMTWindowTank_2",vint);  
  prop->SetPhysProcesses("PMTWindowTank_3",vint);
  prop->SetPhysProcesses("WATERvol_1",vint); 
  
  vint.push_back("dEdx");
  prop->SetPhysProcesses("LightGuideTrap_1",vint);
  prop->SetPhysProcesses("LightGuideTrap_2",vint);
  prop->SetPhysProcesses("LightGuideTrap_3",vint);
  prop->SetPhysProcesses("LightGuideRod_1",vint);
  prop->SetPhysProcesses("LightGuideRod_2",vint);
  prop->SetPhysProcesses("LightGuideRod_3",vint);
  prop->SetPhysProcesses("PMTWindowTank_1",vint);
  prop->SetPhysProcesses("PMTWindowTank_2",vint);  
  prop->SetPhysProcesses("PMTWindowTank_3",vint);
  prop->SetPhysProcesses("WATERvol_1",vint);
  
  
  prop->DumpPhysProcesses();  
  
  /*
    TGeoMaterial* Scintillator = mat->GetMaterial("Scintillator");
    
    LMCfunctor::Instance(); 
    TF1 *f = LMCfunctor::GetBetheBloch();
    f->SetParameter(0,Scintillator->GetZ());
    f->SetParameter(1,Scintillator->GetA());
    f->SetParameter(2,Scintillator->GetDensity());
    f->SetParameter(3,Scintillator->GetRadLen());
    f->SetParameter(4,particle->GetMass());
    
    TCanvas *c = new TCanvas ("c", "Bethe Bloch", 1000,1000);
    c->cd();
    f->Draw();
    
  */
  
  // cout << f->Eval(5.)<< endl ;
  //getchar();

  prop->SetParticle(particle);
  vector<LMCstep*> vstep = prop->Propagate();
  for(uint j=0; j<vstep.size();j++) {
    //vstep[j]->Dump();
  }




  /*
  //propagate stack particles
  for (int i=0; i<stack->Size(); i++) {
    TParticle *p = stack->NextParticle();
    cout << "propagating particle id= " << p->GetPdgCode() << endl;
    prop->SetParticle(p);
    vector<LMCstep*> vstep = prop->Propagate();
    for(uint j=0; j<vstep.size();j++) {
      vector<TParticle*> vpart = vstep[j]->GetParticles();
      for(uint i=0; i<vpart.size();i++) {
	stack->AddParticle(vpart[i]);
      }  
    }
    cout << " stack size = " <<stack->Size() <<  endl;
    for (int n=0; n<stack->Size(); n++) {
      cout << stack->GetEntry(n) << endl;
    }    
    getchar();
  }
   

  */


  /*LMCstep*  f = new LMCstep() ;
  // f = v[3];
  cout << v.size() << endl;
  //  f->Dump();
  */
  
  
  
  //theApp.Run(1);
  
  return 0;
}

